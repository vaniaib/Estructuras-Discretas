--Practica2

{-Función: sayhello
Descripción: regresa "Hello, "+ una cadena
uso: sayhello "Mundo" = Hello, Mundo!
-}
sayhello :: String -> IO ()
sayhello x = putStrLn("Hello, "++ x ++"!")

{-Función: calcularpropina
Descripción: calcula la propina a partir de una cuen-
ta que por defecto se deja el 10%
uso: calcularpropina 50 = 5 
-}
calcularpropina :: Double -> Double
calcularpropina x = x*0.1

{-Función: menor
Descripción: Recibe 3 números y devuelve el menor de ellos
uso:menor 3 5 9 = 3 
-}
menor :: Int -> Int -> Int-> Int
menor x y z =
 if x<=y && x<=z
 then x
 else if y<=x && y<=z
 then  y
 else z

{-Función: decide
Descripción: Recibe un booleano y dos cadenas. Si el valor booleano es True,
devuelve la primera cadena, de lo contrario devuelve la segunda.
uso: True "hola" "adiós"
     "hola"
     False "hola" "adiós"
     "adiós" 
-}
decide :: Bool-> String -> String -> String
decide x y z =
 if x
 then y
 else z

{-Función: esDescendiente
Descripción: recibe cuatro enteros y regresa un booleano True si fueron acomodados en orden descendiente y False si se regresaron en orden ascedndente
uso: esDescendiente 5 4 2 1
     True
     esDescendiente 1 3 5 8
     False
-}
esDescendiente :: Int -> Int-> Int -> Int -> Bool
esDescendiente w x y z=
 if w>=x && x>=y && y>= z
 then True
 else False

{-Función: esDivisible
Descripción: recibe dos enteros x , y
y devuelve una salida del estilo x es divisible por y.
uso: esDivisble 8 4
     8 es divisible por 4
-}
esDivisible :: Int -> Int -> String
esDivisible x y =
 if (x `mod` y == 0)
 then putStrLn (show x ++ "es divisible por" ++ show y)
 else putStrLn (show x ++ "no es divisible por" ++ show  y)




